// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package basicboard

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BasicBoardClient is the client API for BasicBoard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BasicBoardClient interface {
	SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResp, error)
}

type basicBoardClient struct {
	cc grpc.ClientConnInterface
}

func NewBasicBoardClient(cc grpc.ClientConnInterface) BasicBoardClient {
	return &basicBoardClient{cc}
}

func (c *basicBoardClient) SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/board.v1.BasicBoard/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *basicBoardClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, "/board.v1.BasicBoard/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BasicBoardServer is the server API for BasicBoard service.
// All implementations must embed UnimplementedBasicBoardServer
// for forward compatibility
type BasicBoardServer interface {
	SetStatus(context.Context, *SetStatusReq) (*empty.Empty, error)
	GetStatus(context.Context, *empty.Empty) (*StatusResp, error)
	mustEmbedUnimplementedBasicBoardServer()
}

// UnimplementedBasicBoardServer must be embedded to have forward compatible implementations.
type UnimplementedBasicBoardServer struct {
}

func (UnimplementedBasicBoardServer) SetStatus(context.Context, *SetStatusReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedBasicBoardServer) GetStatus(context.Context, *empty.Empty) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedBasicBoardServer) mustEmbedUnimplementedBasicBoardServer() {}

// UnsafeBasicBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BasicBoardServer will
// result in compilation errors.
type UnsafeBasicBoardServer interface {
	mustEmbedUnimplementedBasicBoardServer()
}

func RegisterBasicBoardServer(s grpc.ServiceRegistrar, srv BasicBoardServer) {
	s.RegisterService(&BasicBoard_ServiceDesc, srv)
}

func _BasicBoard_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicBoardServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.v1.BasicBoard/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicBoardServer).SetStatus(ctx, req.(*SetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _BasicBoard_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BasicBoardServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/board.v1.BasicBoard/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BasicBoardServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// BasicBoard_ServiceDesc is the grpc.ServiceDesc for BasicBoard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BasicBoard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "board.v1.BasicBoard",
	HandlerType: (*BasicBoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStatus",
			Handler:    _BasicBoard_SetStatus_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _BasicBoard_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "basicboard/basicboard.proto",
}
