// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package weatherboard

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WeatherBoardClient is the client API for WeatherBoard service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WeatherBoardClient interface {
	SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResp, error)
}

type weatherBoardClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherBoardClient(cc grpc.ClientConnInterface) WeatherBoardClient {
	return &weatherBoardClient{cc}
}

func (c *weatherBoardClient) SetStatus(ctx context.Context, in *SetStatusReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/weather.v1.WeatherBoard/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *weatherBoardClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*StatusResp, error) {
	out := new(StatusResp)
	err := c.cc.Invoke(ctx, "/weather.v1.WeatherBoard/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherBoardServer is the server API for WeatherBoard service.
// All implementations must embed UnimplementedWeatherBoardServer
// for forward compatibility
type WeatherBoardServer interface {
	SetStatus(context.Context, *SetStatusReq) (*empty.Empty, error)
	GetStatus(context.Context, *empty.Empty) (*StatusResp, error)
	mustEmbedUnimplementedWeatherBoardServer()
}

// UnimplementedWeatherBoardServer must be embedded to have forward compatible implementations.
type UnimplementedWeatherBoardServer struct {
}

func (UnimplementedWeatherBoardServer) SetStatus(context.Context, *SetStatusReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedWeatherBoardServer) GetStatus(context.Context, *empty.Empty) (*StatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedWeatherBoardServer) mustEmbedUnimplementedWeatherBoardServer() {}

// UnsafeWeatherBoardServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WeatherBoardServer will
// result in compilation errors.
type UnsafeWeatherBoardServer interface {
	mustEmbedUnimplementedWeatherBoardServer()
}

func RegisterWeatherBoardServer(s grpc.ServiceRegistrar, srv WeatherBoardServer) {
	s.RegisterService(&WeatherBoard_ServiceDesc, srv)
}

func _WeatherBoard_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherBoardServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.v1.WeatherBoard/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherBoardServer).SetStatus(ctx, req.(*SetStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WeatherBoard_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherBoardServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.v1.WeatherBoard/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherBoardServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// WeatherBoard_ServiceDesc is the grpc.ServiceDesc for WeatherBoard service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WeatherBoard_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "weather.v1.WeatherBoard",
	HandlerType: (*WeatherBoardServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetStatus",
			Handler:    _WeatherBoard_SetStatus_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _WeatherBoard_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weatherboard/weatherboard.proto",
}
