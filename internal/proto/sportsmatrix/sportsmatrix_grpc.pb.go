// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.7
// source: sportsmatrix/sportsmatrix.proto

package sportsmatrix

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SportsmatrixClient is the client API for Sportsmatrix service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SportsmatrixClient interface {
	Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResp, error)
	ScreenOn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ScreenOff(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error)
	SetStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*empty.Empty, error)
	SetAll(ctx context.Context, in *SetAllReq, opts ...grpc.CallOption) (*empty.Empty, error)
	Jump(ctx context.Context, in *JumpReq, opts ...grpc.CallOption) (*empty.Empty, error)
	NextBoard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	RestartService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	SetLiveOnly(ctx context.Context, in *LiveOnlyReq, opts ...grpc.CallOption) (*empty.Empty, error)
}

type sportsmatrixClient struct {
	cc grpc.ClientConnInterface
}

func NewSportsmatrixClient(cc grpc.ClientConnInterface) SportsmatrixClient {
	return &sportsmatrixClient{cc}
}

func (c *sportsmatrixClient) Version(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*VersionResp, error) {
	out := new(VersionResp)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/Version", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) ScreenOn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/ScreenOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) ScreenOff(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/ScreenOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) SetStatus(ctx context.Context, in *Status, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/SetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) SetAll(ctx context.Context, in *SetAllReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/SetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) Jump(ctx context.Context, in *JumpReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/Jump", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) NextBoard(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/NextBoard", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) RestartService(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/RestartService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sportsmatrixClient) SetLiveOnly(ctx context.Context, in *LiveOnlyReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/matrix.v1.Sportsmatrix/SetLiveOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SportsmatrixServer is the server API for Sportsmatrix service.
// All implementations must embed UnimplementedSportsmatrixServer
// for forward compatibility
type SportsmatrixServer interface {
	Version(context.Context, *empty.Empty) (*VersionResp, error)
	ScreenOn(context.Context, *empty.Empty) (*empty.Empty, error)
	ScreenOff(context.Context, *empty.Empty) (*empty.Empty, error)
	GetStatus(context.Context, *empty.Empty) (*Status, error)
	SetStatus(context.Context, *Status) (*empty.Empty, error)
	SetAll(context.Context, *SetAllReq) (*empty.Empty, error)
	Jump(context.Context, *JumpReq) (*empty.Empty, error)
	NextBoard(context.Context, *empty.Empty) (*empty.Empty, error)
	RestartService(context.Context, *empty.Empty) (*empty.Empty, error)
	SetLiveOnly(context.Context, *LiveOnlyReq) (*empty.Empty, error)
	mustEmbedUnimplementedSportsmatrixServer()
}

// UnimplementedSportsmatrixServer must be embedded to have forward compatible implementations.
type UnimplementedSportsmatrixServer struct {
}

func (UnimplementedSportsmatrixServer) Version(context.Context, *empty.Empty) (*VersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedSportsmatrixServer) ScreenOn(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScreenOn not implemented")
}
func (UnimplementedSportsmatrixServer) ScreenOff(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScreenOff not implemented")
}
func (UnimplementedSportsmatrixServer) GetStatus(context.Context, *empty.Empty) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedSportsmatrixServer) SetStatus(context.Context, *Status) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetStatus not implemented")
}
func (UnimplementedSportsmatrixServer) SetAll(context.Context, *SetAllReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAll not implemented")
}
func (UnimplementedSportsmatrixServer) Jump(context.Context, *JumpReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Jump not implemented")
}
func (UnimplementedSportsmatrixServer) NextBoard(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextBoard not implemented")
}
func (UnimplementedSportsmatrixServer) RestartService(context.Context, *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestartService not implemented")
}
func (UnimplementedSportsmatrixServer) SetLiveOnly(context.Context, *LiveOnlyReq) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLiveOnly not implemented")
}
func (UnimplementedSportsmatrixServer) mustEmbedUnimplementedSportsmatrixServer() {}

// UnsafeSportsmatrixServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SportsmatrixServer will
// result in compilation errors.
type UnsafeSportsmatrixServer interface {
	mustEmbedUnimplementedSportsmatrixServer()
}

func RegisterSportsmatrixServer(s grpc.ServiceRegistrar, srv SportsmatrixServer) {
	s.RegisterService(&Sportsmatrix_ServiceDesc, srv)
}

func _Sportsmatrix_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/Version",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).Version(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_ScreenOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).ScreenOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/ScreenOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).ScreenOn(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_ScreenOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).ScreenOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/ScreenOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).ScreenOff(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_SetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Status)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).SetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/SetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).SetStatus(ctx, req.(*Status))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_SetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAllReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).SetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/SetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).SetAll(ctx, req.(*SetAllReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_Jump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JumpReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).Jump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/Jump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).Jump(ctx, req.(*JumpReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_NextBoard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).NextBoard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/NextBoard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).NextBoard(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_RestartService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).RestartService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/RestartService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).RestartService(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Sportsmatrix_SetLiveOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiveOnlyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SportsmatrixServer).SetLiveOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matrix.v1.Sportsmatrix/SetLiveOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SportsmatrixServer).SetLiveOnly(ctx, req.(*LiveOnlyReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Sportsmatrix_ServiceDesc is the grpc.ServiceDesc for Sportsmatrix service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Sportsmatrix_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matrix.v1.Sportsmatrix",
	HandlerType: (*SportsmatrixServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Version",
			Handler:    _Sportsmatrix_Version_Handler,
		},
		{
			MethodName: "ScreenOn",
			Handler:    _Sportsmatrix_ScreenOn_Handler,
		},
		{
			MethodName: "ScreenOff",
			Handler:    _Sportsmatrix_ScreenOff_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Sportsmatrix_GetStatus_Handler,
		},
		{
			MethodName: "SetStatus",
			Handler:    _Sportsmatrix_SetStatus_Handler,
		},
		{
			MethodName: "SetAll",
			Handler:    _Sportsmatrix_SetAll_Handler,
		},
		{
			MethodName: "Jump",
			Handler:    _Sportsmatrix_Jump_Handler,
		},
		{
			MethodName: "NextBoard",
			Handler:    _Sportsmatrix_NextBoard_Handler,
		},
		{
			MethodName: "RestartService",
			Handler:    _Sportsmatrix_RestartService_Handler,
		},
		{
			MethodName: "SetLiveOnly",
			Handler:    _Sportsmatrix_SetLiveOnly_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sportsmatrix/sportsmatrix.proto",
}
